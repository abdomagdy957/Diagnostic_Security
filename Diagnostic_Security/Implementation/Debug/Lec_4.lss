
Lec_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00000b62  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000de  008000de  00000c74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000538  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ba4  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f8  00000000  00000000  00004dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002098  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb8  00000000  00000000  0000804c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016a9  00000000  00000000  00009004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000329f  00000000  00000000  0000a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  0000d94c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_1>
   8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_2>
   c:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_3>
  10:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_4>
  14:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_11>
  30:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_12>
  34:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_15>
  40:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3f       	cpi	r26, 0xFC	; 252
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  8a:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteInst>:
	}
	else
	{
		LCD_WriteChar((l_num-10)+'A');
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteInst+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteInst+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteInst+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteInst+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteInst+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteInst+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteInst+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteInst+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	8b e0       	ldi	r24, 0x0B	; 11
 1cc:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 202:	8f ec       	ldi	r24, 0xCF	; 207
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 24e:	08 95       	ret

00000250 <LCD_GoTo>:
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <LCD_GoTo+0xe>
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	86 0f       	add	r24, r22
 258:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 25c:	08 95       	ret
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	29 f4       	brne	.+10     	; 0x26c <LCD_GoTo+0x1c>
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	86 0f       	add	r24, r22
 266:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 26a:	08 95       	ret
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	29 f4       	brne	.+10     	; 0x27a <LCD_GoTo+0x2a>
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	86 0f       	add	r24, r22
 274:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 278:	08 95       	ret
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	21 f4       	brne	.+8      	; 0x286 <LCD_GoTo+0x36>
 27e:	84 ed       	ldi	r24, 0xD4	; 212
 280:	86 0f       	add	r24, r22
 282:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 286:	08 95       	ret

00000288 <LCD_WriteChar>:
 288:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 28c:	08 95       	ret

0000028e <LCD_WriteString>:
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	8c 01       	movw	r16, r24
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCD_WriteString+0x12>
 29a:	0e 94 44 01 	call	0x288	; 0x288 <LCD_WriteChar>
 29e:	cf 5f       	subi	r28, 0xFF	; 255
 2a0:	f8 01       	movw	r30, r16
 2a2:	ec 0f       	add	r30, r28
 2a4:	f1 1d       	adc	r31, r1
 2a6:	80 81       	ld	r24, Z
 2a8:	81 11       	cpse	r24, r1
 2aa:	f7 cf       	rjmp	.-18     	; 0x29a <LCD_WriteString+0xc>
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <LCD_Clear>:
void LCD_Clear(void)
{
	WriteInst(0x01);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	97 e0       	ldi	r25, 0x07	; 7
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_Clear+0xa>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_Clear+0x10>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <encryptBytes>:
{
	
	
}
void encryptBytes(u8* arr, u8 length, u8 *key)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
 2ce:	da 01       	movw	r26, r20
	// Implementing symmetric encryption algorithm here
	// Example: using XOR encryption with the secureAccessKey:
	for(u8 i=0; i<length; i++)
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <encryptBytes+0x2c>
	{
		encryptedBytes[i] = arr[i]^key[i];
 2d4:	29 2f       	mov	r18, r25
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	fe 01       	movw	r30, r28
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	70 81       	ld	r23, Z
 2e0:	fd 01       	movw	r30, r26
 2e2:	e2 0f       	add	r30, r18
 2e4:	f3 1f       	adc	r31, r19
 2e6:	50 81       	ld	r21, Z
 2e8:	f9 01       	movw	r30, r18
 2ea:	e0 51       	subi	r30, 0x10	; 16
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	57 27       	eor	r21, r23
 2f0:	50 83       	st	Z, r21
}
void encryptBytes(u8* arr, u8 length, u8 *key)
{
	// Implementing symmetric encryption algorithm here
	// Example: using XOR encryption with the secureAccessKey:
	for(u8 i=0; i<length; i++)
 2f2:	9f 5f       	subi	r25, 0xFF	; 255
 2f4:	96 17       	cp	r25, r22
 2f6:	70 f3       	brcs	.-36     	; 0x2d4 <encryptBytes+0xc>
	/*for (u8 i = 0; i < length; i++)
	{
		arr[i] ^= key[i % 4];
	}
	*/
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:
void decryptBytes(u8* arr, u8 length, u8 key);
void uartSendHex(u8 data);
void SendSecurityAccess(void);
int main(void)
{
	DIO_Init();
 2fe:	0e 94 10 03 	call	0x620	; 0x620 <DIO_Init>
	LCD_Init();
 302:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	UART_Init();
 306:	0e 94 1d 05 	call	0xa3a	; 0xa3a <UART_Init>
	u16 servo_angle = 0;
	*/
	
    while(1) 
    {	
		UART_ReceiveString(subService);
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 81 05 	call	0xb02	; 0xb02 <UART_ReceiveString>
		if (memcmp(service, subService, 8) == 0)
 312:	48 e0       	ldi	r20, 0x08	; 8
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	68 ee       	ldi	r22, 0xE8	; 232
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	88 e8       	ldi	r24, 0x88	; 136
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 a2 05 	call	0xb44	; 0xb44 <memcmp>
 322:	89 2b       	or	r24, r25
 324:	91 f7       	brne	.-28     	; 0x30a <main+0xc>
		{
			if(securityFlag == 0)
 326:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
 32a:	81 11       	cpse	r24, r1
 32c:	48 c0       	rjmp	.+144    	; 0x3be <main+0xc0>
			{
				LCD_WriteString(NRC1);
 32e:	89 e7       	ldi	r24, 0x79	; 121
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
				//SendSecurityAccess();
				UART_ReceiveString(subService_2);
 336:	88 ef       	ldi	r24, 0xF8	; 248
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 81 05 	call	0xb02	; 0xb02 <UART_ReceiveString>
				if (memcmp(service_2, subService_2, 4) == 0)
 33e:	44 e0       	ldi	r20, 0x04	; 4
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	68 ef       	ldi	r22, 0xF8	; 248
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	84 e8       	ldi	r24, 0x84	; 132
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 a2 05 	call	0xb44	; 0xb44 <memcmp>
 34e:	89 2b       	or	r24, r25
 350:	c9 f4       	brne	.+50     	; 0x384 <main+0x86>
				{
					//LCD_WriteString(subService);
					
					LCD_Clear();
 352:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_Clear>
					LCD_WriteString(CodeBeforeRand);
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
					encryptBytes(randomBytes,8,key);
 35e:	40 e6       	ldi	r20, 0x60	; 96
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	68 e0       	ldi	r22, 0x08	; 8
 364:	88 e6       	ldi	r24, 0x68	; 104
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 64 01 	call	0x2c8	; 0x2c8 <encryptBytes>
					LCD_WriteString(encryptedBytes);
 36c:	80 ef       	ldi	r24, 0xF0	; 240
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
					LCD_GoTo(2,0);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
					LCD_WriteString(randomBytes);
 37c:	88 e6       	ldi	r24, 0x68	; 104
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
				}
				UART_ReceiveString(decryptedBytes);
 384:	80 ee       	ldi	r24, 0xE0	; 224
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 81 05 	call	0xb02	; 0xb02 <UART_ReceiveString>
				//LCD_WriteString(CodeEncrypted);
				//decryptBytes(encryptedBytes,4,35);
				if (memcmp(randomBytes, decryptedBytes, 8) == 0)
 38c:	48 e0       	ldi	r20, 0x08	; 8
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	60 ee       	ldi	r22, 0xE0	; 224
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	88 e6       	ldi	r24, 0x68	; 104
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 a2 05 	call	0xb44	; 0xb44 <memcmp>
 39c:	89 2b       	or	r24, r25
 39e:	51 f4       	brne	.+20     	; 0x3b4 <main+0xb6>
				{
					LCD_Clear();
 3a0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_Clear>
					securityFlag = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__data_end>
					LCD_WriteString("ON: 6702");
 3aa:	88 ec       	ldi	r24, 0xC8	; 200
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
 3b2:	ab cf       	rjmp	.-170    	; 0x30a <main+0xc>
				}
				else
				{
					LCD_WriteString("OFF: 7F2735");
 3b4:	81 ed       	ldi	r24, 0xD1	; 209
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
 3bc:	a6 cf       	rjmp	.-180    	; 0x30a <main+0xc>
				}
			}
			else
			{
				LCD_Clear();
 3be:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_Clear>
				LCD_WriteString(NRC2);
 3c2:	80 e7       	ldi	r24, 0x70	; 112
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_WriteString>
				DIO_WritePin(PINC0,HIGH);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e1       	ldi	r24, 0x10	; 16
 3ce:	0e 94 20 03 	call	0x640	; 0x640 <DIO_WritePin>
 3d2:	9b cf       	rjmp	.-202    	; 0x30a <main+0xc>

000003d4 <__vector_16>:
void ADC_TailChaining(ADC_Channel_type CH)
{
	ADC_StartConversion(CH_0);
}
ISR(ADC_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	ADC_BusyFlag = 0;
 3f6:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <ADC_BusyFlag>
	ADC_Fptr();
 3fa:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ADC_Fptr>
 3fe:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ADC_Fptr+0x1>
 402:	09 95       	icall
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <DIO_InitPin>:
	}
}

static void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
 426:	98 2f       	mov	r25, r24
 428:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 42a:	86 95       	lsr	r24
 42c:	86 95       	lsr	r24
 42e:	86 95       	lsr	r24
	switch(status)
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	09 f4       	brne	.+2      	; 0x436 <DIO_InitPin+0x10>
 434:	55 c0       	rjmp	.+170    	; 0x4e0 <DIO_InitPin+0xba>
 436:	20 f0       	brcs	.+8      	; 0x440 <DIO_InitPin+0x1a>
 438:	62 30       	cpi	r22, 0x02	; 2
 43a:	09 f4       	brne	.+2      	; 0x43e <DIO_InitPin+0x18>
 43c:	a1 c0       	rjmp	.+322    	; 0x580 <DIO_InitPin+0x15a>
 43e:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	c1 f0       	breq	.+48     	; 0x474 <DIO_InitPin+0x4e>
 444:	28 f0       	brcs	.+10     	; 0x450 <DIO_InitPin+0x2a>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	39 f1       	breq	.+78     	; 0x498 <DIO_InitPin+0x72>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	b9 f1       	breq	.+110    	; 0x4bc <DIO_InitPin+0x96>
 44e:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 450:	4a b3       	in	r20, 0x1a	; 26
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_InitPin+0x38>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	9a 95       	dec	r25
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_InitPin+0x34>
 462:	cb 01       	movw	r24, r22
 464:	94 2f       	mov	r25, r20
 466:	98 2b       	or	r25, r24
 468:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 46a:	9b b3       	in	r25, 0x1b	; 27
 46c:	80 95       	com	r24
 46e:	89 23       	and	r24, r25
 470:	8b bb       	out	0x1b, r24	; 27
			break;
 472:	08 95       	ret
			
			case PB:
			SET_BIT(DDRB,pin_num);
 474:	47 b3       	in	r20, 0x17	; 23
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_InitPin+0x5c>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	9a 95       	dec	r25
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_InitPin+0x58>
 486:	cb 01       	movw	r24, r22
 488:	94 2f       	mov	r25, r20
 48a:	98 2b       	or	r25, r24
 48c:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 48e:	98 b3       	in	r25, 0x18	; 24
 490:	80 95       	com	r24
 492:	89 23       	and	r24, r25
 494:	88 bb       	out	0x18, r24	; 24
			break;
 496:	08 95       	ret
			
			case PC:
			SET_BIT(DDRC,pin_num);
 498:	44 b3       	in	r20, 0x14	; 20
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	b9 01       	movw	r22, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_InitPin+0x80>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	9a 95       	dec	r25
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_InitPin+0x7c>
 4aa:	cb 01       	movw	r24, r22
 4ac:	94 2f       	mov	r25, r20
 4ae:	98 2b       	or	r25, r24
 4b0:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 4b2:	95 b3       	in	r25, 0x15	; 21
 4b4:	80 95       	com	r24
 4b6:	89 23       	and	r24, r25
 4b8:	85 bb       	out	0x15, r24	; 21
			break;
 4ba:	08 95       	ret
			
			case PD:
			SET_BIT(DDRD,pin_num);
 4bc:	41 b3       	in	r20, 0x11	; 17
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_InitPin+0xa4>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	9a 95       	dec	r25
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_InitPin+0xa0>
 4ce:	cb 01       	movw	r24, r22
 4d0:	94 2f       	mov	r25, r20
 4d2:	98 2b       	or	r25, r24
 4d4:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 4d6:	92 b3       	in	r25, 0x12	; 18
 4d8:	80 95       	com	r24
 4da:	89 23       	and	r24, r25
 4dc:	82 bb       	out	0x12, r24	; 18
			break;
 4de:	08 95       	ret
		}
		break;
		
		case INFREE:
		switch(port)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	c1 f0       	breq	.+48     	; 0x514 <DIO_InitPin+0xee>
 4e4:	28 f0       	brcs	.+10     	; 0x4f0 <DIO_InitPin+0xca>
 4e6:	82 30       	cpi	r24, 0x02	; 2
 4e8:	39 f1       	breq	.+78     	; 0x538 <DIO_InitPin+0x112>
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	b9 f1       	breq	.+110    	; 0x55c <DIO_InitPin+0x136>
 4ee:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 4f0:	4a b3       	in	r20, 0x1a	; 26
 4f2:	21 e0       	ldi	r18, 0x01	; 1
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	b9 01       	movw	r22, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_InitPin+0xd8>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 95       	dec	r25
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_InitPin+0xd4>
 502:	cb 01       	movw	r24, r22
 504:	80 95       	com	r24
 506:	94 2f       	mov	r25, r20
 508:	98 23       	and	r25, r24
 50a:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 50c:	9b b3       	in	r25, 0x1b	; 27
 50e:	89 23       	and	r24, r25
 510:	8b bb       	out	0x1b, r24	; 27
			break;
 512:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 514:	47 b3       	in	r20, 0x17	; 23
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	b9 01       	movw	r22, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_InitPin+0xfc>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	9a 95       	dec	r25
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_InitPin+0xf8>
 526:	cb 01       	movw	r24, r22
 528:	80 95       	com	r24
 52a:	94 2f       	mov	r25, r20
 52c:	98 23       	and	r25, r24
 52e:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 530:	98 b3       	in	r25, 0x18	; 24
 532:	89 23       	and	r24, r25
 534:	88 bb       	out	0x18, r24	; 24
			break;
 536:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 538:	44 b3       	in	r20, 0x14	; 20
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_InitPin+0x120>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	9a 95       	dec	r25
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_InitPin+0x11c>
 54a:	cb 01       	movw	r24, r22
 54c:	80 95       	com	r24
 54e:	94 2f       	mov	r25, r20
 550:	98 23       	and	r25, r24
 552:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 554:	95 b3       	in	r25, 0x15	; 21
 556:	89 23       	and	r24, r25
 558:	85 bb       	out	0x15, r24	; 21
			break;
 55a:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 55c:	41 b3       	in	r20, 0x11	; 17
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_InitPin+0x144>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	9a 95       	dec	r25
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_InitPin+0x140>
 56e:	cb 01       	movw	r24, r22
 570:	80 95       	com	r24
 572:	94 2f       	mov	r25, r20
 574:	98 23       	and	r25, r24
 576:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 578:	92 b3       	in	r25, 0x12	; 18
 57a:	89 23       	and	r24, r25
 57c:	82 bb       	out	0x12, r24	; 18
			break;
 57e:	08 95       	ret
		}
		break;
		case INPULL:
		switch(port)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	c1 f0       	breq	.+48     	; 0x5b4 <DIO_InitPin+0x18e>
 584:	28 f0       	brcs	.+10     	; 0x590 <DIO_InitPin+0x16a>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	39 f1       	breq	.+78     	; 0x5d8 <DIO_InitPin+0x1b2>
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	b9 f1       	breq	.+110    	; 0x5fc <DIO_InitPin+0x1d6>
 58e:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 590:	4a b3       	in	r20, 0x1a	; 26
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	b9 01       	movw	r22, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_InitPin+0x178>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	9a 95       	dec	r25
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_InitPin+0x174>
 5a2:	cb 01       	movw	r24, r22
 5a4:	96 2f       	mov	r25, r22
 5a6:	90 95       	com	r25
 5a8:	94 23       	and	r25, r20
 5aa:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 5ac:	9b b3       	in	r25, 0x1b	; 27
 5ae:	89 2b       	or	r24, r25
 5b0:	8b bb       	out	0x1b, r24	; 27
			break;
 5b2:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 5b4:	47 b3       	in	r20, 0x17	; 23
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	b9 01       	movw	r22, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_InitPin+0x19c>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	9a 95       	dec	r25
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_InitPin+0x198>
 5c6:	cb 01       	movw	r24, r22
 5c8:	96 2f       	mov	r25, r22
 5ca:	90 95       	com	r25
 5cc:	94 23       	and	r25, r20
 5ce:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 5d0:	98 b3       	in	r25, 0x18	; 24
 5d2:	89 2b       	or	r24, r25
 5d4:	88 bb       	out	0x18, r24	; 24
			break;
 5d6:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 5d8:	44 b3       	in	r20, 0x14	; 20
 5da:	21 e0       	ldi	r18, 0x01	; 1
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	b9 01       	movw	r22, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_InitPin+0x1c0>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	9a 95       	dec	r25
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_InitPin+0x1bc>
 5ea:	cb 01       	movw	r24, r22
 5ec:	96 2f       	mov	r25, r22
 5ee:	90 95       	com	r25
 5f0:	94 23       	and	r25, r20
 5f2:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 5f4:	95 b3       	in	r25, 0x15	; 21
 5f6:	89 2b       	or	r24, r25
 5f8:	85 bb       	out	0x15, r24	; 21
			break;
 5fa:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 5fc:	41 b3       	in	r20, 0x11	; 17
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	b9 01       	movw	r22, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_InitPin+0x1e4>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	9a 95       	dec	r25
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_InitPin+0x1e0>
 60e:	cb 01       	movw	r24, r22
 610:	96 2f       	mov	r25, r22
 612:	90 95       	com	r25
 614:	94 23       	and	r25, r20
 616:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 618:	92 b3       	in	r25, 0x12	; 18
 61a:	89 2b       	or	r24, r25
 61c:	82 bb       	out	0x12, r24	; 18
 61e:	08 95       	ret

00000620 <DIO_Init>:
#include "DIO.h"
#include "DIO_Private.h"
#include "DIO_Cfg.h"

void DIO_Init(void)
{
 620:	cf 93       	push	r28
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 622:	c0 e0       	ldi	r28, 0x00	; 0
 624:	09 c0       	rjmp	.+18     	; 0x638 <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 626:	ec 2f       	mov	r30, r28
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	e8 55       	subi	r30, 0x58	; 88
 62c:	ff 4f       	sbci	r31, 0xFF	; 255
 62e:	60 81       	ld	r22, Z
 630:	8c 2f       	mov	r24, r28
 632:	0e 94 13 02 	call	0x426	; 0x426 <DIO_InitPin>
#include "DIO_Cfg.h"

void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 636:	cf 5f       	subi	r28, 0xFF	; 255
 638:	c0 32       	cpi	r28, 0x20	; 32
 63a:	a8 f3       	brcs	.-22     	; 0x626 <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
	u8 pin_num = pin%8;
 640:	98 2f       	mov	r25, r24
 642:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 644:	86 95       	lsr	r24
 646:	86 95       	lsr	r24
 648:	86 95       	lsr	r24
	
	if(volt == HIGH)
 64a:	61 30       	cpi	r22, 0x01	; 1
 64c:	e1 f5       	brne	.+120    	; 0x6c6 <DIO_WritePin+0x86>
	{
		switch(port)
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	99 f0       	breq	.+38     	; 0x678 <DIO_WritePin+0x38>
 652:	28 f0       	brcs	.+10     	; 0x65e <DIO_WritePin+0x1e>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	e9 f0       	breq	.+58     	; 0x692 <DIO_WritePin+0x52>
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	41 f1       	breq	.+80     	; 0x6ac <DIO_WritePin+0x6c>
 65c:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 65e:	4b b3       	in	r20, 0x1b	; 27
 660:	21 e0       	ldi	r18, 0x01	; 1
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	b9 01       	movw	r22, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_WritePin+0x2c>
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	9a 95       	dec	r25
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_WritePin+0x28>
 670:	cb 01       	movw	r24, r22
 672:	84 2b       	or	r24, r20
 674:	8b bb       	out	0x1b, r24	; 27
			break;
 676:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 678:	48 b3       	in	r20, 0x18	; 24
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	b9 01       	movw	r22, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_WritePin+0x46>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	9a 95       	dec	r25
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_WritePin+0x42>
 68a:	cb 01       	movw	r24, r22
 68c:	84 2b       	or	r24, r20
 68e:	88 bb       	out	0x18, r24	; 24
			break;
 690:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 692:	45 b3       	in	r20, 0x15	; 21
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	b9 01       	movw	r22, r18
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_WritePin+0x60>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	9a 95       	dec	r25
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_WritePin+0x5c>
 6a4:	cb 01       	movw	r24, r22
 6a6:	84 2b       	or	r24, r20
 6a8:	85 bb       	out	0x15, r24	; 21
			break;
 6aa:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 6ac:	42 b3       	in	r20, 0x12	; 18
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	b9 01       	movw	r22, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_WritePin+0x7a>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	9a 95       	dec	r25
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_WritePin+0x76>
 6be:	cb 01       	movw	r24, r22
 6c0:	84 2b       	or	r24, r20
 6c2:	82 bb       	out	0x12, r24	; 18
			break;
 6c4:	08 95       	ret
		}
	}
	else
	{
		switch(port)
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	a1 f0       	breq	.+40     	; 0x6f2 <DIO_WritePin+0xb2>
 6ca:	28 f0       	brcs	.+10     	; 0x6d6 <DIO_WritePin+0x96>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	f9 f0       	breq	.+62     	; 0x70e <DIO_WritePin+0xce>
 6d0:	83 30       	cpi	r24, 0x03	; 3
 6d2:	59 f1       	breq	.+86     	; 0x72a <DIO_WritePin+0xea>
 6d4:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(PORTA,pin_num);
 6d6:	4b b3       	in	r20, 0x1b	; 27
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	b9 01       	movw	r22, r18
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_WritePin+0xa4>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	9a 95       	dec	r25
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_WritePin+0xa0>
 6e8:	cb 01       	movw	r24, r22
 6ea:	80 95       	com	r24
 6ec:	84 23       	and	r24, r20
 6ee:	8b bb       	out	0x1b, r24	; 27
			break;
 6f0:	08 95       	ret
			
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 6f2:	48 b3       	in	r20, 0x18	; 24
 6f4:	21 e0       	ldi	r18, 0x01	; 1
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	b9 01       	movw	r22, r18
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_WritePin+0xc0>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	9a 95       	dec	r25
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_WritePin+0xbc>
 704:	cb 01       	movw	r24, r22
 706:	80 95       	com	r24
 708:	84 23       	and	r24, r20
 70a:	88 bb       	out	0x18, r24	; 24
			break;
 70c:	08 95       	ret
			
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 70e:	45 b3       	in	r20, 0x15	; 21
 710:	21 e0       	ldi	r18, 0x01	; 1
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	b9 01       	movw	r22, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_WritePin+0xdc>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	9a 95       	dec	r25
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_WritePin+0xd8>
 720:	cb 01       	movw	r24, r22
 722:	80 95       	com	r24
 724:	84 23       	and	r24, r20
 726:	85 bb       	out	0x15, r24	; 21
			break;
 728:	08 95       	ret
			
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 72a:	42 b3       	in	r20, 0x12	; 18
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	b9 01       	movw	r22, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_WritePin+0xf8>
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	9a 95       	dec	r25
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_WritePin+0xf4>
 73c:	cb 01       	movw	r24, r22
 73e:	80 95       	com	r24
 740:	84 23       	and	r24, r20
 742:	82 bb       	out	0x12, r24	; 18
 744:	08 95       	ret

00000746 <__vector_1>:
}

/*******************************ISR********************************/

ISR(INT0_vect)
{
 746:	1f 92       	push	r1
 748:	0f 92       	push	r0
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	2f 93       	push	r18
 752:	3f 93       	push	r19
 754:	4f 93       	push	r20
 756:	5f 93       	push	r21
 758:	6f 93       	push	r22
 75a:	7f 93       	push	r23
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	af 93       	push	r26
 762:	bf 93       	push	r27
 764:	ef 93       	push	r30
 766:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 768:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <INT0_Fptr>
 76c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <INT0_Fptr+0x1>
 770:	e2 30       	cpi	r30, 0x02	; 2
 772:	f1 05       	cpc	r31, r1
 774:	09 f0       	breq	.+2      	; 0x778 <__vector_1+0x32>
	{
		INT0_Fptr();
 776:	09 95       	icall
	}	
}
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__vector_2>:
ISR(INT1_vect)
{	
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	2f 93       	push	r18
 7a6:	3f 93       	push	r19
 7a8:	4f 93       	push	r20
 7aa:	5f 93       	push	r21
 7ac:	6f 93       	push	r22
 7ae:	7f 93       	push	r23
 7b0:	8f 93       	push	r24
 7b2:	9f 93       	push	r25
 7b4:	af 93       	push	r26
 7b6:	bf 93       	push	r27
 7b8:	ef 93       	push	r30
 7ba:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 7bc:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <INT1_Fptr>
 7c0:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <INT1_Fptr+0x1>
 7c4:	e2 30       	cpi	r30, 0x02	; 2
 7c6:	f1 05       	cpc	r31, r1
 7c8:	09 f0       	breq	.+2      	; 0x7cc <__vector_2+0x32>
	{
		INT1_Fptr();
 7ca:	09 95       	icall
	}
}
 7cc:	ff 91       	pop	r31
 7ce:	ef 91       	pop	r30
 7d0:	bf 91       	pop	r27
 7d2:	af 91       	pop	r26
 7d4:	9f 91       	pop	r25
 7d6:	8f 91       	pop	r24
 7d8:	7f 91       	pop	r23
 7da:	6f 91       	pop	r22
 7dc:	5f 91       	pop	r21
 7de:	4f 91       	pop	r20
 7e0:	3f 91       	pop	r19
 7e2:	2f 91       	pop	r18
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <__vector_3>:
ISR(INT2_vect)
{
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 810:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <INT2_Fptr>
 814:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <INT2_Fptr+0x1>
 818:	e2 30       	cpi	r30, 0x02	; 2
 81a:	f1 05       	cpc	r31, r1
 81c:	09 f0       	breq	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
	{
		INT2_Fptr();
 81e:	09 95       	icall
	}
	
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_12>:
void SPI_SetCallBack(void (*LocalFptr)(void))
{
	SPI_Fptr = LocalFptr;
}
ISR(SPI_STC_vect)
{
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	if (SPI_Fptr!=NULLPTR)
 864:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <SPI_Fptr>
 868:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <SPI_Fptr+0x1>
 86c:	e2 30       	cpi	r30, 0x02	; 2
 86e:	f1 05       	cpc	r31, r1
 870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
	{
		SPI_Fptr();
 872:	09 95       	icall
	}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <__vector_11>:
{
	Timer2_OVF_Fptr=local_fptr;
}
void TIMER2_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer2_OC_Fptr=local_fptr;
 896:	1f 92       	push	r1
 898:	0f 92       	push	r0
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	0f 92       	push	r0
 89e:	11 24       	eor	r1, r1
 8a0:	2f 93       	push	r18
 8a2:	3f 93       	push	r19
 8a4:	4f 93       	push	r20
 8a6:	5f 93       	push	r21
 8a8:	6f 93       	push	r22
 8aa:	7f 93       	push	r23
 8ac:	8f 93       	push	r24
 8ae:	9f 93       	push	r25
 8b0:	af 93       	push	r26
 8b2:	bf 93       	push	r27
 8b4:	ef 93       	push	r30
 8b6:	ff 93       	push	r31
 8b8:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Timer0_OVF_Fptr>
 8bc:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Timer0_OVF_Fptr+0x1>
 8c0:	e2 30       	cpi	r30, 0x02	; 2
 8c2:	f1 05       	cpc	r31, r1
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__vector_11+0x32>
 8c6:	09 95       	icall
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

000008ea <__vector_9>:
 8ea:	1f 92       	push	r1
 8ec:	0f 92       	push	r0
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	0f 92       	push	r0
 8f2:	11 24       	eor	r1, r1
 8f4:	2f 93       	push	r18
 8f6:	3f 93       	push	r19
 8f8:	4f 93       	push	r20
 8fa:	5f 93       	push	r21
 8fc:	6f 93       	push	r22
 8fe:	7f 93       	push	r23
 900:	8f 93       	push	r24
 902:	9f 93       	push	r25
 904:	af 93       	push	r26
 906:	bf 93       	push	r27
 908:	ef 93       	push	r30
 90a:	ff 93       	push	r31
 90c:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Timer1_OVF_Fptr>
 910:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Timer1_OVF_Fptr+0x1>
 914:	e2 30       	cpi	r30, 0x02	; 2
 916:	f1 05       	cpc	r31, r1
 918:	09 f0       	breq	.+2      	; 0x91c <__vector_9+0x32>
 91a:	09 95       	icall
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_7>:
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31
 960:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Timer1_OCA_Fptr>
 964:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Timer1_OCA_Fptr+0x1>
 968:	e2 30       	cpi	r30, 0x02	; 2
 96a:	f1 05       	cpc	r31, r1
 96c:	09 f0       	breq	.+2      	; 0x970 <__vector_7+0x32>
 96e:	09 95       	icall
 970:	ff 91       	pop	r31
 972:	ef 91       	pop	r30
 974:	bf 91       	pop	r27
 976:	af 91       	pop	r26
 978:	9f 91       	pop	r25
 97a:	8f 91       	pop	r24
 97c:	7f 91       	pop	r23
 97e:	6f 91       	pop	r22
 980:	5f 91       	pop	r21
 982:	4f 91       	pop	r20
 984:	3f 91       	pop	r19
 986:	2f 91       	pop	r18
 988:	0f 90       	pop	r0
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	0f 90       	pop	r0
 98e:	1f 90       	pop	r1
 990:	18 95       	reti

00000992 <__vector_5>:
}
/*********************************Timer 2 ISR functions*********************************************/

ISR(TIMER2_OVF_vect)
{
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	2f 93       	push	r18
 99e:	3f 93       	push	r19
 9a0:	4f 93       	push	r20
 9a2:	5f 93       	push	r21
 9a4:	6f 93       	push	r22
 9a6:	7f 93       	push	r23
 9a8:	8f 93       	push	r24
 9aa:	9f 93       	push	r25
 9ac:	af 93       	push	r26
 9ae:	bf 93       	push	r27
 9b0:	ef 93       	push	r30
 9b2:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
 9b4:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Timer2_OVF_Fptr>
 9b8:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Timer2_OVF_Fptr+0x1>
 9bc:	e2 30       	cpi	r30, 0x02	; 2
 9be:	f1 05       	cpc	r31, r1
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <__vector_5+0x32>
	{
		Timer2_OVF_Fptr();
 9c2:	09 95       	icall
	}
}
 9c4:	ff 91       	pop	r31
 9c6:	ef 91       	pop	r30
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	7f 91       	pop	r23
 9d2:	6f 91       	pop	r22
 9d4:	5f 91       	pop	r21
 9d6:	4f 91       	pop	r20
 9d8:	3f 91       	pop	r19
 9da:	2f 91       	pop	r18
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <__vector_4>:


ISR(TIMER2_COMP_vect)
{
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
 9f0:	2f 93       	push	r18
 9f2:	3f 93       	push	r19
 9f4:	4f 93       	push	r20
 9f6:	5f 93       	push	r21
 9f8:	6f 93       	push	r22
 9fa:	7f 93       	push	r23
 9fc:	8f 93       	push	r24
 9fe:	9f 93       	push	r25
 a00:	af 93       	push	r26
 a02:	bf 93       	push	r27
 a04:	ef 93       	push	r30
 a06:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
 a08:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Timer2_OC_Fptr>
 a0c:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Timer2_OC_Fptr+0x1>
 a10:	e2 30       	cpi	r30, 0x02	; 2
 a12:	f1 05       	cpc	r31, r1
 a14:	09 f0       	breq	.+2      	; 0xa18 <__vector_4+0x32>
	{
		Timer2_OC_Fptr();
 a16:	09 95       	icall
	}
}
 a18:	ff 91       	pop	r31
 a1a:	ef 91       	pop	r30
 a1c:	bf 91       	pop	r27
 a1e:	af 91       	pop	r26
 a20:	9f 91       	pop	r25
 a22:	8f 91       	pop	r24
 a24:	7f 91       	pop	r23
 a26:	6f 91       	pop	r22
 a28:	5f 91       	pop	r21
 a2a:	4f 91       	pop	r20
 a2c:	3f 91       	pop	r19
 a2e:	2f 91       	pop	r18
 a30:	0f 90       	pop	r0
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	0f 90       	pop	r0
 a36:	1f 90       	pop	r1
 a38:	18 95       	reti

00000a3a <UART_Init>:
	UART_RX_Fptr = LocalFptr;
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
 a3a:	83 e3       	ldi	r24, 0x33	; 51
 a3c:	89 b9       	out	0x09, r24	; 9
 a3e:	8b b1       	in	r24, 0x0b	; 11
 a40:	8d 7f       	andi	r24, 0xFD	; 253
 a42:	8b b9       	out	0x0b, r24	; 11
 a44:	8a b1       	in	r24, 0x0a	; 10
 a46:	80 61       	ori	r24, 0x10	; 16
 a48:	8a b9       	out	0x0a, r24	; 10
 a4a:	8a b1       	in	r24, 0x0a	; 10
 a4c:	88 60       	ori	r24, 0x08	; 8
 a4e:	8a b9       	out	0x0a, r24	; 10
 a50:	08 95       	ret

00000a52 <UART_Receive>:
 a52:	5f 9b       	sbis	0x0b, 7	; 11
 a54:	fe cf       	rjmp	.-4      	; 0xa52 <UART_Receive>
 a56:	8c b1       	in	r24, 0x0c	; 12
 a58:	08 95       	ret

00000a5a <__vector_13>:
}

ISR(UART_RXC_vect)
{
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	2f 93       	push	r18
 a66:	3f 93       	push	r19
 a68:	4f 93       	push	r20
 a6a:	5f 93       	push	r21
 a6c:	6f 93       	push	r22
 a6e:	7f 93       	push	r23
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	af 93       	push	r26
 a76:	bf 93       	push	r27
 a78:	ef 93       	push	r30
 a7a:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
 a7c:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <UART_RX_Fptr>
 a80:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <UART_RX_Fptr+0x1>
 a84:	e2 30       	cpi	r30, 0x02	; 2
 a86:	f1 05       	cpc	r31, r1
 a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_13+0x32>
	{
		UART_RX_Fptr();
 a8a:	09 95       	icall
	}
}
 a8c:	ff 91       	pop	r31
 a8e:	ef 91       	pop	r30
 a90:	bf 91       	pop	r27
 a92:	af 91       	pop	r26
 a94:	9f 91       	pop	r25
 a96:	8f 91       	pop	r24
 a98:	7f 91       	pop	r23
 a9a:	6f 91       	pop	r22
 a9c:	5f 91       	pop	r21
 a9e:	4f 91       	pop	r20
 aa0:	3f 91       	pop	r19
 aa2:	2f 91       	pop	r18
 aa4:	0f 90       	pop	r0
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	0f 90       	pop	r0
 aaa:	1f 90       	pop	r1
 aac:	18 95       	reti

00000aae <__vector_15>:

ISR(UART_TXC_vect)
{
 aae:	1f 92       	push	r1
 ab0:	0f 92       	push	r0
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	0f 92       	push	r0
 ab6:	11 24       	eor	r1, r1
 ab8:	2f 93       	push	r18
 aba:	3f 93       	push	r19
 abc:	4f 93       	push	r20
 abe:	5f 93       	push	r21
 ac0:	6f 93       	push	r22
 ac2:	7f 93       	push	r23
 ac4:	8f 93       	push	r24
 ac6:	9f 93       	push	r25
 ac8:	af 93       	push	r26
 aca:	bf 93       	push	r27
 acc:	ef 93       	push	r30
 ace:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
 ad0:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <UART_TX_Fptr>
 ad4:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <UART_TX_Fptr+0x1>
 ad8:	e2 30       	cpi	r30, 0x02	; 2
 ada:	f1 05       	cpc	r31, r1
 adc:	09 f0       	breq	.+2      	; 0xae0 <__vector_15+0x32>
	{
		UART_TX_Fptr();
 ade:	09 95       	icall
	}
 ae0:	ff 91       	pop	r31
 ae2:	ef 91       	pop	r30
 ae4:	bf 91       	pop	r27
 ae6:	af 91       	pop	r26
 ae8:	9f 91       	pop	r25
 aea:	8f 91       	pop	r24
 aec:	7f 91       	pop	r23
 aee:	6f 91       	pop	r22
 af0:	5f 91       	pop	r21
 af2:	4f 91       	pop	r20
 af4:	3f 91       	pop	r19
 af6:	2f 91       	pop	r18
 af8:	0f 90       	pop	r0
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	0f 90       	pop	r0
 afe:	1f 90       	pop	r1
 b00:	18 95       	reti

00000b02 <UART_ReceiveString>:
	{
		UART_SendNoBlock(i);
	}
}
void UART_ReceiveString(u8*str)
{
 b02:	ef 92       	push	r14
 b04:	ff 92       	push	r15
 b06:	0f 93       	push	r16
 b08:	1f 93       	push	r17
 b0a:	cf 93       	push	r28
 b0c:	8c 01       	movw	r16, r24
	u8 i=0;
	str[0]=UART_Receive();
 b0e:	0e 94 29 05 	call	0xa52	; 0xa52 <UART_Receive>
 b12:	f8 01       	movw	r30, r16
 b14:	80 83       	st	Z, r24
		UART_SendNoBlock(i);
	}
}
void UART_ReceiveString(u8*str)
{
	u8 i=0;
 b16:	c0 e0       	ldi	r28, 0x00	; 0
	str[0]=UART_Receive();
	for (;str[i]!=0x0d;)
 b18:	08 c0       	rjmp	.+16     	; 0xb2a <UART_ReceiveString+0x28>
	{
		i++;
 b1a:	cf 5f       	subi	r28, 0xFF	; 255
		str[i]=UART_Receive();
 b1c:	78 01       	movw	r14, r16
 b1e:	ec 0e       	add	r14, r28
 b20:	f1 1c       	adc	r15, r1
 b22:	0e 94 29 05 	call	0xa52	; 0xa52 <UART_Receive>
 b26:	f7 01       	movw	r30, r14
 b28:	80 83       	st	Z, r24
}
void UART_ReceiveString(u8*str)
{
	u8 i=0;
	str[0]=UART_Receive();
	for (;str[i]!=0x0d;)
 b2a:	f8 01       	movw	r30, r16
 b2c:	ec 0f       	add	r30, r28
 b2e:	f1 1d       	adc	r31, r1
 b30:	80 81       	ld	r24, Z
 b32:	8d 30       	cpi	r24, 0x0D	; 13
 b34:	91 f7       	brne	.-28     	; 0xb1a <UART_ReceiveString+0x18>
	{
		i++;
		str[i]=UART_Receive();
	}
	str[i]=0;
 b36:	10 82       	st	Z, r1
	
}
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	ff 90       	pop	r15
 b40:	ef 90       	pop	r14
 b42:	08 95       	ret

00000b44 <memcmp>:
 b44:	fb 01       	movw	r30, r22
 b46:	dc 01       	movw	r26, r24
 b48:	04 c0       	rjmp	.+8      	; 0xb52 <memcmp+0xe>
 b4a:	8d 91       	ld	r24, X+
 b4c:	01 90       	ld	r0, Z+
 b4e:	80 19       	sub	r24, r0
 b50:	21 f4       	brne	.+8      	; 0xb5a <memcmp+0x16>
 b52:	41 50       	subi	r20, 0x01	; 1
 b54:	50 40       	sbci	r21, 0x00	; 0
 b56:	c8 f7       	brcc	.-14     	; 0xb4a <memcmp+0x6>
 b58:	88 1b       	sub	r24, r24
 b5a:	99 0b       	sbc	r25, r25
 b5c:	08 95       	ret

00000b5e <_exit>:
 b5e:	f8 94       	cli

00000b60 <__stop_program>:
 b60:	ff cf       	rjmp	.-2      	; 0xb60 <__stop_program>
